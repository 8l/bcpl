                                Source Listing                   5-JUN-2013 16:10:01  HP C++ V7.2-018                   Page 1
                                                                 5-JUN-2013 16:09:33  TESTPROG.C;79

	      1 #include <stdio.h>
	   1599 
	   1600 #define BCPLWORD int
	   1601 #define SHP (short *)
	   1602 #define SH (SHP W)
	   1603 #define HP (unsigned short *)
	   1604 #define H (HP W)
	   1605 #define B ((unsigned char *)W)
	   1606 
	   1607 extern BCPLWORD tst(BCPLWORD, BCPLWORD, BCPLWORD*);
	   1608 
	   1609 int main() {
	   1610   BCPLWORD W[10000000];
	   1611   BCPLWORD a, pc, tab;
	   1612 
	   1613   pc = 51621;
	   1614 
	   1615   //skip over possible fill, n and the default label
	   1616   tab = ((pc+1)>>1)+2;
	   1617 
	   1618   // Fill in n, the defauilt label and the case labels
	   1619   SH[tab-2] = 128;   // the table size
	   1620   SH[tab-1] = -2000; // default rel address
	   1621   for(a=0; a<128; a++) SH[tab+a] = -(1000+a);
	   1622 
	   1623   for(a=0; a<100; a++) tst(a,pc,W);
	   1624 
	   1625   return 0;
	   1626 }
	   1627 
	   1628 BCPLWORD tst(BCPLWORD a, BCPLWORD pc, BCPLWORD*W) {
	   1629   switch(a) {
	   1630     default: //break;
	   1631 
	   1632     case 93:
	   1633     { BCPLWORD n,q;
	   1634       q = (pc+1)>>1;
	   1635       n = H[q++];
	   1636       if(0<=a && a<n) q += a+1;
	   1637       pc = (q<<1) + SH[q];
	   1638 printf("case 93: a=%d n=%d q=%d SH[q]=%d pc=%d\n", a, n, q, SH[q], pc);
	   1639       break;
	   1640     }
	   1641   }
	   1642 
	   1643   return pc;
	   1644 }

                                Source Listing                   5-JUN-2013 16:10:01  HP C++ V7.2-018                   Page 2
                                                                 5-JUN-2013 16:09:33  TESTPROG.C;79

------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------- Machine Code Listing -------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
 
 
    NOTICE
 
    There are two types of machine code listings supported by this
    compiler.  The compiler determines which type to use based on
    whether or not the user is generating an object file as part of the
    compilation.
 
 
    /LIST/MACHINE_CODE/OBJECT
 
    When the user is generating an object file, the machine code listing
    uses a feature of ANALYZE/OBJECT to disassemble the actual
    instructions used in the object file.
 
 
    /LIST/MACHINE_CODE/NOOBJECT
 
    When the user is not generating an object file, the compiler
    generates a machine code listing which includes source correlation
    information.  This type of machine code listing may or may not
    accurately reflect the instructions actually used in an object file.
    This type of machine code listing should only be used to aid in
    debugging.  It is known to have defects, but is still useful to
    obtain the correlation between the source code and the machine
    instructions.
 
 
    The following machine code listing does not correspond to an object
    file and may be useful to correlate source code to the actual
    machine code.
 
 
------------------------------------------------------------------------------------------------------------------------------------

	.section .text
.LNDBG_TX:
// mark_description "HP C++ V7.2-018";
// mark_description "-c";
	//.radix C
	.file "LDA19:[MRICH177.DISTRIBUTION.BCPL.CINTCODE.SYSC]TESTPROG.C;79"
	.section .text, "xa", "progbits"
	.align 64
// -- Begin MAIN
	.proc MAIN#
// Block 0: entry prolog modified  Pred:     Succ: 10  -GO
// Freq 1.0e+00
	.global MAIN#

MAIN:
MAIN??unw:
 {   .mlx  //R-Addr: 0x0

//   12 :int main() {

	alloc	r32=ar.pfs,0,8,3,0			//0: {12:12:LDA19:[MRICH177.DISTRIBUTION.BCPL.CINTCODE.SYSC]TESTPROG.C;79} 88
	movl	r30=0x002625a00				//0: {12:12} 89
 }
 {   .mmi  //R-Addr: 0x10

//   13 :  BCPLWORD W[10000000];
//   14 :  BCPLWORD a, pc, tab;
//   15 :
//   16 :  pc = 51621;
//   17 :
//   18 :  //skip over possible fill, n and the default label
//   19 :  tab = ((pc+1)>>1)+2;
//   20 :
//   21 :  // Fill in n, the defauilt label and the case labels
//   22 :  SH[tab-2] = 128;   // the table size

	add	r25=51638,r0				//0: {22:3} 9

//   23 :  SH[tab-1] = -2000; // default rel address

	add	r24=-2000,r0				//0: {23:3} 14
	add	r26=51640,r0 ;;				//0: {23:3} 12
 }
 {   .mmi  //R-Addr: 0x20
	add	r17=51642,r0				//1: {12:12} 6
	sub	sp=sp,r30				//1: {12:12} 90
	mov	r33=b0					//1: {12:12} 2
 }
 {   .mmi  //R-Addr: 0x30
	add	r14=-1000,r0				//1: {23:3} 16

//   24 :  for(a=0; a<128; a++) SH[tab+a] = -(1000+a);
//   25 :
//   26 :  for(a=0; a<100; a++) tst(a,pc,W);

	add	r39=0,r0				//1: {26:7} 22
	add	r20=128,r0 ;;				//1: {22:3} 8
 }
 {   .mii  //R-Addr: 0x40
	add	r36=3,r0				//2: {26:24} 23
	sxt4	r19=sp					//2: {12:12} 5
	add	r16=16,sp				//2: {26:24} 25
 }
 {   .mmb  //R-Addr: 0x50
	add	r38=51621,r0				//2: {26:24} 24
	mov	r35=gp					//2: {12:12} 86
	nop.b	0 ;;
 }
 {   .mmi  //R-Addr: 0x60
	add	r15=r19,r26				//3: {23:3} 13
	add	r18=r19,r25				//3: {22:3} 10
	mov	r34=ar.lc				//3: {12:12} 3
 }
 {   .mii  //R-Addr: 0x70
	add	r11=r19,r17				//3: {12:12} 7
	sxt4	r37=r16 ;;				//3: {26:24} 26
	mov	ar.lc=127				//4: {23:3} 17
 }
 {   .mmi  //R-Addr: 0x80
	st2	[r15]=r24 ;;				//4: {23:3} 15
	st2	[r18]=r20				//5: {22:3} 11
	nop.i	0
 }
 {   .bbb  //R-Addr: 0x90
	nop.b	0					//5: {22:3} 107
	nop.b	0
	nop.b	0 ;;
// Block 10: lentry lexit ltail  Pred: 0 10     Succ: 10 2  -G
// Freq 1.3e+02
 }
.b1_10: 
 {   .mib  //R-Addr: 0xa0
	st2	[r11]=r14,2				//0: {24:24} 52
	add	r14=-1,r14				//0: {24:19} 54
// Branch taken probability 0.99
	br.cloop.sptk	.b1_10 ;;			//0: {24:3} 55
// Block 2: prolog epilog  Pred: 10     Succ: 3  -G
// Freq 1.0e+00
 }
 {   .mii  //R-Addr: 0xb0
	nop.m	0
	mov	ar.lc=99				//0: {26:24} 27
	nop.i	0 ;;
// Block 3: lentry  Pred: 2 4     Succ: 4  -GO
// Freq 1.0e+02
 }
.b1_3: 
 {   .mii  //R-Addr: 0xc0
	mov	r42=r37					//0: {26:24} 31
	mov	r40=r39					//0: {26:24} 29
	mov	r41=r38					//0: {26:24} 30
 }
 {   .mmb  //R-Addr: 0xd0
	mov	r25=r36					//0: {26:24} 32
	add	r39=1,r39				//0: {26:19} 35
	br.call.sptk	b0=CX3$_Z3TSTIIPI2N6LL7C# ;;	//0: {26:24} 33
// Block 4: lexit ltail  Pred: 3     Succ: 3 5  -GO
// Freq 1.0e+02
 }
 {   .mib  //R-Addr: 0xe0
	mov	gp=r35					//2: {26:24} 85
	nop.i	0
// Branch taken probability 0.99
	br.cloop.sptk	.b1_3 ;;			//2: {26:3} 36
// Block 5: exit epilog  Pred: 4     Succ:  -GO
// Freq 1.0e+00
 }
 {   .mmi  //R-Addr: 0xf0

//   27 :
//   28 :  return 0;

	mov	r8=r0					//0: {28:10} 41
	nop.m	0
	mov	ar.pfs=r32				//0: {28:10} 39
 }
 {   .mlx  //R-Addr: 0x100
	nop.m	0
	movl	r30=0x002625a00 ;;			//0: {28:10} 91
 }
 {   .mii  //R-Addr: 0x110
	add	sp=sp,r30				//1: {28:10} 92
	mov	ar.lc=r34 ;;				//1: {28:10} 40
	mov	b0=r33					//2: {28:10} 38
 }
 {   .mib  //R-Addr: 0x120
	nop.m	0
	nop.i	0
	br.ret.sptk.many	b0 ;;			//2: {28:10} 42
 }
.LN1:
.LNMAIN:
	.section	.IA_64.unwind_info,	"a", "progbits"
	.align 8
__udt_MAIN??unw:
	data8 0x1300300000004				// length: 32 bytes
							// flags: 0x3003
							// version: 1
	string "\x60\x1e"				//R3: prologue size 30
	string "\xe0\x07\xa0\xcb\x98\x01"		//P7: mem_stack_f t/off 0x7 size 40000000
	string "\xe6\x00"				//P7: pfs_when t/off 0x0
	string "\xb1\x20"				//P3: pfs_gr r32
	string "\xe4\x08"				//P7: rp_when t/off 0x8
	string "\xb0\xa1"				//P3: rp_gr r33
	string "\xea\x14"				//P7: lc_when t/off 0x14
	string "\xb2\xa2"				//P3: lc_gr r34
	string "\x61\x1b"				//R3: body size 27
	string "\x81"					//B1: label_state 1
	string "\xc0\x05"				//B2: epilog time 5 ecount 0
	string "\x00\x00\x00\x00\x00\x00\x00"
	data8 @ltoff(@fptr(CXXL$MAIN_DISPATCH_ROUTINE#))
	data8 67305473
	data8 2
	.section .IA_64.unwind, "ao", "unwind"
	data4 @segrel(MAIN??unw#)
	data4 @segrel(MAIN??unw#+0x130)
	data4 @segrel(__udt_MAIN??unw)
	.section .text, "xa", "progbits"
// -- End MAIN
	.endp MAIN#
	.section .text, "xa", "progbits"
	.align 64
// -- Begin ELF$TFRADR
	.proc ELF$TFRADR#
// Block 0: entry  Pred:     Succ: 4  -GO
// Freq 1.0e+00
	.global ELF$TFRADR#

ELF$TFRADR:
ELF$TFRADR??unw:
 {   .mmi  //R-Addr: 0x0

//   29 :}

	alloc	r38=ar.pfs,6,4,8,0			//0: {29:1} 187
	add	sp=-64,sp				//0: {29:1} 188
	mov	r39=b0					//0: {29:1} 109
 }
 {   .mmi  //R-Addr: 0x10
	add	r15=8192,r0				//0: {29:1} 119
	add	r25=9,r0				//0: {29:1} 136
	sxt4	r27=r32 ;;				//0: {29:1} 121
 }
 {   .mmi  //R-Addr: 0x20
	add	r9=32,sp				//1: {29:1} 117
	mov	r42=r27					//1: {29:1} 137
	sxt4	r26=r34					//1: {29:1} 123
 }
 {   .mmi  //R-Addr: 0x30
	add	r10=56,sp				//1: {29:1} 127
	add	r11=64,sp				//1: {29:1} 129
	sxt4	r41=sp ;;				//1: {29:1} 131
 }
 {   .mmi  //R-Addr: 0x40
	add	r16=72,sp				//2: {29:1} 132
	add	r18=32,sp				//2: {29:1} 189
	sxt4	r3=r9					//2: {29:1} 118
 }
 {   .mmi  //R-Addr: 0x50
	add	r8=16,r41				//2: {29:1} 134
	mov	r44=r26					//2: {29:1} 139
	sxt4	r24=r33 ;;				//2: {29:1} 122
 }
 {   .mmi  //R-Addr: 0x60
	st8	[r18]=r0				//3: {29:1} 190
	mov	r43=r24					//3: {29:1} 138
	sxt4	r18=r37					//3: {29:1} 126
 }
 {   .mmi  //R-Addr: 0x70
	st8.rel	[r3]=r15				//3: {29:1} 120
	mov	r40=gp					//3: {29:1} 185
	sxt4	r2=r16 ;;				//3: {29:1} 133
 }
 {   .mii  //R-Addr: 0x80
	mov	r47=r18					//4: {29:1} 142
	sxt4	r19=r35					//4: {29:1} 124
	sxt4	r20=r36					//4: {29:1} 125
 }
 {   .mmi  //R-Addr: 0x90
	st8	[r8]=r2 ;;				//4: {29:1} 135
	mov	r46=r20					//5: {29:1} 141
	sxt4	r29=r11					//5: {29:1} 130
 }
 {   .mii  //R-Addr: 0xa0
	mov	r45=r19					//5: {29:1} 140
	sxt4	r28=r10 ;;				//5: {29:1} 128
	mov	r49=r29					//6: {29:1} 144
 }
 {   .mib  //R-Addr: 0xb0
	mov	r48=r28					//6: {29:1} 143
	nop.i	0
// Block 4:  Pred: 0     Succ: 1  -GO
// Freq 1.0e+00
	br.call.sptk	b0=DECC$MAIN# ;;		//6: {29:1} 146
// Block 1:  Pred: 4     Succ: 2  -GO
// Freq 1.0e+00
 }
 {   .mmi  //R-Addr: 0xc0
	add	r17=72,r41				//8: {29:1} 153
	add	r25=3,r0				//8: {29:1} 156
	add	r15=64,r41				//8: {29:1} 150
 }
 {   .mii  //R-Addr: 0xd0
	mov	gp=r40					//8: {29:1} 183
	add	r16=56,r41				//8: {29:1} 147
	nop.i	0 ;;
 }
 {   .mmi  //R-Addr: 0xe0
	ld4	r11=[r15]				//9: {29:1} 151
	ld4	r14=[r16]				//9: {29:1} 148
	nop.i	0 ;;
 }
 {   .mii  //R-Addr: 0xf0
	ld4	r10=[r17]				//10: {29:1} 154
	sxt4	r43=r11					//10: {29:1} 152
	sxt4	r42=r14 ;;				//10: {29:1} 149
 }
 {   .mib  //R-Addr: 0x100
	nop.m	0
	sxt4	r44=r10					//11: {29:1} 155
	br.call.sptk.many	b0=MAIN# ;;		//11: {29:1} 161
// Block 2:  Pred: 1     Succ: 3  -G
// Freq 1.0e+00
 }
 {   .mib  //R-Addr: 0x110
	add	r25=1,r0				//0: {29:1} 164
	sxt4	r42=r8					//0: {29:1} 163
	br.call.sptk	b0=DECC$EXIT# ;;		//0: {29:1} 167
// Block 3: exit  Pred: 2     Succ:  -GO
// Freq 1.0e+00
 }
 {   .mii  //R-Addr: 0x120
	add	sp=64,sp				//0: {29:1} 191
	mov	ar.pfs=r38				//0: {29:1} 169
	mov	gp=r40 ;;				//0: {29:1} 184
 }
 {   .mib  //R-Addr: 0x130
	nop.m	0
	mov	b0=r39					//1: {29:1} 168
	br.ret.sptk.many	b0 ;;			//1: {29:1} 170
 }
.LNELF$TFRADR:
	.section	.IA_64.unwind_info,	"a", "progbits"
	.align 8
__udt_ELF$TFRADR??unw:
	data8 0x1300300000003				// length: 24 bytes
							// flags: 0x3003
							// version: 1
	string "\x60\x23"				//R3: prologue size 35
	string "\xe0\x01\x04"				//P7: mem_stack_f t/off 0x1 size 64
	string "\xe6\x00"				//P7: pfs_when t/off 0x0
	string "\xb1\x26"				//P3: pfs_gr r38
	string "\xe4\x02"				//P7: rp_when t/off 0x2
	string "\xb0\xa7"				//P3: rp_gr r39
	string "\x61\x19"				//R3: body size 25
	string "\x81"					//B1: label_state 1
	string "\xc0\x05"				//B2: epilog time 5 ecount 0
	string "\x00\x00\x00\x00\x00\x00"
	data8 @ltoff(@fptr(DECC$$SHELL_HANDLER#))
	data8 67305473
	data8 -32
	.section .IA_64.unwind, "ao", "unwind"
	data4 @segrel(ELF$TFRADR??unw#)
	data4 @segrel(ELF$TFRADR??unw#+0x140)
	data4 @segrel(__udt_ELF$TFRADR??unw)
	.section .text, "xa", "progbits"
// -- End ELF$TFRADR
	.endp ELF$TFRADR#
	.section .rodata, "a", "progbits"
	.align 16
__STRING$0:
	data1 99	// s8
	data1 97	// s8
	data1 115	// s8
	data1 101	// s8
	data1 32	// s8
	data1 57	// s8
	data1 51	// s8
	data1 58	// s8
	data1 32	// s8
	data1 97	// s8
	data1 61	// s8
	data1 37	// s8
	data1 100	// s8
	data1 32	// s8
	data1 110	// s8
	data1 61	// s8
	data1 37	// s8
	data1 100	// s8
	data1 32	// s8
	data1 113	// s8
	data1 61	// s8
	data1 37	// s8
	data1 100	// s8
	data1 32	// s8
	data1 83	// s8
	data1 72	// s8
	data1 91	// s8
	data1 113	// s8
	data1 93	// s8
	data1 61	// s8
	data1 37	// s8
	data1 100	// s8
	data1 32	// s8
	data1 112	// s8
	data1 99	// s8
	data1 61	// s8
	data1 37	// s8
	data1 100	// s8
	data1 10	// s8
	data1 0	// s8
	.type	__STRING$0#,@object
	.size	__STRING$0#,40
	.section .text, "xa", "progbits"
	.align 64
// -- Begin CX3$_Z3TSTIIPI2N6LL7C
	.proc CX3$_Z3TSTIIPI2N6LL7C#
// Block 0: entry collapsed  Pred:     Succ: 1 3  -GO
// Freq 1.0e+00
	.global CX3$_Z3TSTIIPI2N6LL7C#

CX3$_Z3TSTIIPI2N6LL7C:
CX3$_Z3TSTIIPI2N6LL7C??unw:
 {   .mmi  //R-Addr: 0x0

//   31 :BCPLWORD tst(BCPLWORD a, BCPLWORD pc, BCPLWORD*W) {

	alloc	r35=ar.pfs,3,3,6,0			//0: {31:51} 313

//   32 :  switch(a) {
//   33 :    default: //break;
//   34 :
//   35 :    case 93:
//   36 :    { BCPLWORD n,q;
//   37 :      q = (pc+1)>>1;

	add	r29=1,r33				//0: {37:7} 211
	mov	r36=b0					//0: {31:51} 206
 }
 {   .mmi  //R-Addr: 0x10

//   38 :      n = H[q++];
//   39 :      if(0<=a && a<n) q += a+1;
//   40 :      pc = (q<<1) + SH[q];
//   41 :printf("case 93: a=%d n=%d q=%d SH[q]=%d pc=%d\n", a, n, q, SH[q], pc);

	add	r27=@ltoff(__STRING$0#),gp		//0: {41:1} 223
	cmp4.lt.unc	p7,p6=r32,r0			//0: {39:7} 282
	sxt4	r28=r34 ;;				//0: {38:7} 214
 }
 {   .mmi  //R-Addr: 0x20
	ld8	r26=[r27]				//1: {41:1} 224
	add	r25=6,r0				//1: {41:1} 230
	extr	r24=r29,1,31				//1: {37:7} 212
 }
 {   .mii  //R-Addr: 0x30
	mov	r37=gp					//1: {31:51} 311
	sxt4	r20=r32 ;;				//1: {41:1} 226
	sxt4	r18=r26					//2: {41:1} 225
 }
 {   .mii  //R-Addr: 0x40
	add	r17=1,r24				//2: {38:13} 213
	shladd	r19=r24,1,r28 ;;			//2: {38:7} 215
	sxt4	r15=r17					//3: {41:1} 228
 }
 {   .mmi  //R-Addr: 0x50
	ld2	r16=[r19]				//3: {38:7} 216
	add	r11=r32,r17,1				//3: {39:23} 242
	shladd	r14=r17,1,r28 ;;			//3: {40:7} 219
 }
 {   .mii  //R-Addr: 0x60
	ld2.s	r10=[r14]				//4: {40:7} 220
  (p6)	cmp4.ge	p7,p0=r32,r16				//4: {39:7} 284
	shladd	r9=r11,1,r28				//4: {40:7} 295
 }
 {   .mmb  //R-Addr: 0x70
	nop.m	0
	nop.m	0
// Branch taken probability 0.75
  (p7)	br.cond.dptk	.b3_1 ;;			//4: {39:7} 241
// Block 3:  Pred: 0     Succ: 1  -G
// Freq 2.5e-01
 }
 {   .mii  //R-Addr: 0x80
	ld2.s	r10=[r9]				//0: {40:7} 303
	mov	r17=r11					//0: {39:23} 296
	mov	r14=r9 ;;				//0: {40:7} 304
 }
 {   .mii  //R-Addr: 0x90
	nop.m	0
	sxt4	r15=r11					//1: {41:1} 297
	nop.i	0 ;;
// Block 1:  Pred: 0 3     Succ: 14 16  -G
// Freq 1.0e+00
 }
.b3_1: 
 {   .mii  //R-Addr: 0xa0
	nop.m	0
	nop.i	0
	sxt2	r8=r10					//0: {40:7} 221
 }
 {   .mmi  //R-Addr: 0xb0
// Branch taken probability 0.05
	chk.s	r10,.b3_14 ;;				//0: {40:7} 298
// Block 16:  Pred: 1     Succ: 15  -G
// Freq 9.5e-01
	shladd	r2=r17,1,r8				//1: {40:7} 222
	nop.i	0 ;;
// Block 15:  Pred: 14 16     Succ: 4  -GO
// Freq 1.0e+00
 }
.b3_15: 
 {   .mmi  //R-Addr: 0xc0
	mov	r39=r20					//0: {41:1} 232
	mov	r40=r16					//0: {41:1} 233
	sxt4	r32=r2					//0: {41:1} 229
 }
 {   .mmi  //R-Addr: 0xd0
	mov	r41=r15					//0: {41:1} 234
	mov	r42=r8					//0: {41:1} 235
	mov	r38=r18 ;;				//0: {41:1} 231
 }
 {   .mib  //R-Addr: 0xe0
	mov	r43=r32					//1: {41:1} 236
	nop.i	0
	br.call.sptk	b0=DECC$TXPRINTF# ;;		//1: {41:1} 238
// Block 4: exit  Pred: 15     Succ:  -GO
// Freq 1.0e+00
 }
 {   .mii  //R-Addr: 0xf0

//   42 :      break;
//   43 :    }
//   44 :  }
//   45 :
//   46 :  return pc;

	mov	r8=r32					//2: {46:10} 245
	mov	b0=r36					//2: {46:10} 243
	mov	gp=r37 ;;				//2: {41:1} 310
 }
 {   .mib  //R-Addr: 0x100
	nop.m	0
	mov	ar.pfs=r35				//3: {46:10} 244
	br.ret.sptk.many	b0 ;;			//3: {46:10} 246
// Block 14: recovery  Pred: 1     Succ: 15  -O
// Freq 5.0e-02
 }
.b3_14: 
 {   .mmi  //R-Addr: 0x110
	ld2	r10=[r14] ;;				//0: {40:7} 299
	nop.m	0
	sxt2	r8=r10 ;;				//1: {40:7} 305
 }
 {   .mib  //R-Addr: 0x120
	shladd	r2=r17,1,r8				//2: {40:7} 309
	nop.i	0
	br.cond.sptk	.b3_15 ;;			//2: {40:7} 314
 }
.LN2:
.LNCX3$_Z3TSTIIPI2N6LL7C:
	.section	.IA_64.unwind_info,	"a", "progbits"
	.align 8
__udt_CX3$_Z3TSTIIPI2N6LL7C??unw:
	data8 0x1300000000003				// length: 24 bytes
							// flags: 0x3000
							// version: 1
	string "\x60\x18"				//R3: prologue size 24
	string "\xe6\x00"				//P7: pfs_when t/off 0x0
	string "\xb1\x23"				//P3: pfs_gr r35
	string "\xe4\x02"				//P7: rp_when t/off 0x2
	string "\xb0\xa4"				//P3: rp_gr r36
	string "\x61\x1b"				//R3: body size 27
	string "\x81"					//B1: label_state 1
	string "\x61\x06"				//R3: body size 6
	string "\xa1"					//B1: copy_state 1
	string "\xc0\x00"				//B2: epilog time 0 ecount 0
	string "\x00\x00\x00\x00\x00\x00"
	data8 196609
	.section .IA_64.unwind, "ao", "unwind"
	data4 @segrel(CX3$_Z3TSTIIPI2N6LL7C??unw#)
	data4 @segrel(CX3$_Z3TSTIIPI2N6LL7C??unw#+0x130)
	data4 @segrel(__udt_CX3$_Z3TSTIIPI2N6LL7C??unw)
	.section .text, "xa", "progbits"
// -- End CX3$_Z3TSTIIPI2N6LL7C
	.endp CX3$_Z3TSTIIPI2N6LL7C#
	.type	DECC$$SHELL_HANDLER#,@function
	.global DECC$$SHELL_HANDLER#
	.type	CXXL$MAIN_DISPATCH_ROUTINE#,@function
	.global CXXL$MAIN_DISPATCH_ROUTINE#
	.type	DECC$EXIT#,@function
	.global DECC$EXIT#
	.type	DECC$MAIN#,@function
	.global DECC$MAIN#
	.type	DECC$TXPRINTF#,@function
	.global DECC$TXPRINTF#
// -- Begin DWARF2 SEGMENT .debug_info
	.section .debug_info, "", "progbits"
.debug_info_seg:
	.align 1
	.msb
	data4.ua 0xbe000000
	data2.ua 0x0200
	.lsb
	data4.ua @secrel(.debug_abbrev_seg#)
	.msb
	data1 0x08
.DWinfo0:
//	DW_TAG_compile_unit:
	data1 0x01
//	DW_AT_comp_dir:
	data8.ua 0x4c444131393a5b4d
	data8.ua 0x524943483137372e
	data8.ua 0x4449535452494255
	data8.ua 0x54494f4e2e424350
	data8.ua 0x4c2e43494e54434f
	data8.ua 0x44452e535953435d
	data1 0x00
//	DW_AT_low_pc:
	.lsb
	data8.ua (.LNDBG_TX#)
	.msb
//	DW_AT_high_pc:
	.lsb
	data8.ua (.LNDBG_TXe#)
	.msb
//	DW_AT_language:
	data1 0x04
	data8.ua 0x5445535450524f47
	data1 0x00
//	DW_AT_name:
	data8.ua 0x4c444131393a5b4d
	data8.ua 0x524943483137372e
	data8.ua 0x4449535452494255
	data8.ua 0x54494f4e2e424350
	data8.ua 0x4c2e43494e54434f
	data8.ua 0x44452e535953435d
	data8.ua 0x5445535450524f47
	data4.ua 0x2e433b37
	data2.ua 0x3900
//	DW_AT_producer:
	data8.ua 0x485020432b2b2056
	data8.ua 0x372e322d30313800
.DWinfo1:
//	DW_TAG_subprogram:
	data1 0x02
//	DW_AT_name:
	data8.ua 0x5452414e53464552
	data8.ua 0x24425245414b2447
	data2.ua 0x4f00
//	DW_AT_entry_pc:
	.lsb
	data8.ua (main#)
	.msb
//	DW_AT_calling_convention:
	data1 0x02
	data1 0x00
// -- Begin DWARF2 SEGMENT .debug_abbrev
	.section .debug_abbrev, "", "progbits"
.debug_abbrev_seg:
	.align 1
	.msb
	data1 0x01
	data1 0x11
	data1 0x01
	data1 0x1b
	data1 0x08
	data1 0x11
	data1 0x01
	data1 0x12
	data1 0x01
	data1 0x13
	data1 0x0b
	data2.ua 0x9f40
	data1 0x08
	data1 0x03
	data1 0x08
	data1 0x25
	data1 0x08
	data2.ua 0x0000
	data1 0x02
	data1 0x2e
	data1 0x00
	data1 0x03
	data1 0x08
	data1 0x52
	data1 0x01
	data1 0x36
	data1 0x0b
	data2.ua 0x0000
	data1 0x00
	.section .text
.LNDBG_TXe:
// End

Command Line
------- ----

CXX/LIST/MACHINE_CODE/NOOBJECT TESTPROG.C

These macros are in effect at the start of the compilation.
----- ------ --- -- ------ -- --- ----- -- --- ------------

 __CRTL_VER=80300000 __DECFIX_CXXC_BUGS9857=1 __ia64__=1 __ia64=1
 __VMS_VER=80300022 __VMS_VERSION="V8.3    " __vms_version="V8.3    "
 __G_FLOAT=0 __D_FLOAT=0 __vms=1 __VMS=1 __INITIAL_POINTER_SIZE=0
 __BIASED_FLT_ROUNDS=2 _IEEE_FP=1 __32BITS=1 _LONGLONG=1 __IEEE_FLOAT=1
 __MODEL_ANSI=1 __STD_ANSI=1 __IMPLICIT_INCLUDE_ENABLED=1 __STDNEW=1
 __X_FLOAT=1 __PRAGMA_ENVIRONMENT=1 __DECCXX_VER=70290018 __DECCXX=1
 __EDG_VERSION__=304 __EDG__=1 __IMPLICIT_USING_STD=1 __RTTI=1 __EXCEPTIONS=1
 __GLOBAL_ARRAY_NEW=1 __BOOL_IS_A_RESERVED_WORD=1 _BOOL_EXISTS=1 __WCHAR_T=1
 _WCHAR_T=1 __cplusplus=199711L __TIME__="16:10:01" __DATE__="Jun  5 2013"
